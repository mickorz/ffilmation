FFilmation: AS3 isometric engine. Version history:
-------------------------------------------------

1.3.1:

This version is mainly 1.3 but with several internal changes that were needed to build the scene editor. These are the most notable:

IMPORTANT!: All paths defined in any XML are relative to that XML. The standalone editor does not have a valid basepath as a flash movie does, so this change was mandatory. Besides, I think it makes more sense and makes references easier to follow. If you load current scenes with the new version, you will get "File not found" errors.
The scene dispatches ErrorEvent.ERROR events when something goes wrong at initialization time ( missing files, invalid material definitions ). This is a first step in making the engine more robust. However, If you use the editor you shouldn't be creating buggy XMLs.
The whole scene initialization process has been cleaned up and split into several classes. This makes somehow possible to call certain processes separately from the editor ( add a new resource file, resort the walls, etc etc ). Also, the fSceneInitializer class becomes more simple and understandable.
I have removed the generator interface and the generators: I must admit they were a poor replacement for an scene editor, and I don't find them useful anymore.
The material interface is properly setup so any material can be the base to a compound material ( for example, a door material can be the base for a window material ). This is almost a bugfix rather than an improvement.
Also with each release I try to tidy the code and class structure. I know it's already a bit intimidating at first, but if you stay within the documented API I think it is reasonabily easy to pick.
You can now destroy an scene while it is being initialized and the initialization process is cancelled.

1.3:

New internal structure for the engine (99% backwards compatible ). Classes have been reorganized on a per-function basis, allowing easier extendability.
Also, rendering is completely separated from geometrical information. You can load and control several scenes but only the one
being shown will have its Sprites created and spend system resources.
New extendable render engine interface, separated from logical calculations such as collisions. In the future, this will allow writing
an specific flash 10 renderer or a papervision renderer, for example.
PathFinding now uses an fEnginePathFindCriteria interface, so users can write their custom pathFind behaviours.
Implemented scene.removeCharacter()
Significant shadow rendering optimizations. Quality settings other than BEST now perform almost as if there were no shadows at all.
Added character-character collision. Thanks to Alex Stone
Added the fBullet class which generates SHOT events and supports ricochet definitions.
Added two bullet renderers (pixel and line)
Added a simple profiler. You can use it to profile the performance of the rendering engine in your own scenes and also profile your own code.
Occlusion is now a property of characters, not cameras, and has a new render method. I wasn’t sattisfied with the old one and besides it was very cpu-consuming.

1.2:

NEW

Nicer object shadows, that fade away as the object moves away from the plane. Try jumping in the demo to see it in action.
The Grid is now generated on-demand, only used cells are generated. No longer we create a huge array that covers the whole scene. This has a huge impact
in both initialization time and memory usage, and makes possible to have much bigger scenes. This is a gret improvement in my opinion.
Added Mouse translation coordinates and an A* pathfinding: all you need to program point-and-click adventuring and Diablo clones.
Added shadowQuality settings. Shadows are the main bottleneck of the engine, therefore there is a need to have quality options to adjust them to your requirements.
Added the fMaterialTypes class, where you can find info on the available materials and how to use them
Added the "fence" material
New zSort algorythm. It is cleaner and faster, and I hope this one will work properly.
Added the "xmlObj" property to elements
Added the "window" material.
Added the "animated" property to fObjects, which allows some optimization.
Added the fHole class, which gives control over holes in fPlanes. Now holes can be opened and closed. 
Added a Building Generator
Moved generators to new package "helpful" outside the engine, as they really do not belong there. Thnx to Jason Booth for the wisdom.
Sprite hierarchy is properly setup so you can add Mouse Events to fElements and the appropiate element receives the event.
Materials now tile seamlessly along adjacent surfaces.

FIXES

Fixed: The engine now assigns an internal unique ID to each element, and uses that id in internal hashtables instead of relying on the IDs you assign. This was causing lots of trouble.
Fixed: "BOX Tag" from generators were ignored
Fixed: Exception caused by shadow projection trying to calculate intersection between paralel lines.
Fixed: Several shadow projection bugs.
Fixed: Some collisions between objects were missed.
Fixed: mathUtils.getAngle now returns values consisten with the engine's coordinate system.

1.1:

NEW

Added coordinate-translation methods to fScene, so you can easily map Stage coordinates into game coordinates, or viceversa
Added camera occlusion
Added Scene controllers
Added enable/disable methods to the scene
Added Element controllers
Added Perlin Material
Added Door Material
Added Generator interface + SCATTER Generator
Implemented fScene.removeOmniLight

FIXES

Fixed fObject.hide() causing a zSort exception
Fixed createCharacter()
Fixed false shadows from floors to higher walls
Fixed a big performance botteneck that affected character movement

TODO
. Finish fObject shadowing models
. AI helpers: isElementVisibleFrom(), findPathTo(), findAmbushPathTo()

1.0: Initial Release

KNOW BUGS
. At creation time, If objects are placed beyond bounds some errors are not properly catched. Unless you're capturing everything
or are testing from inside the flash authoring tool, the engine stops working and you don't know what happened.

TODO
. Finish fObject shadowing models
. AI helpers: isElementVisibleFrom(), findPathTo(), findAmbushPathTo()
. Camera occlusion: assign a transparency percent to elements that are in front of the camera, you you can see what you're doing
. More material types
. Add more object libraries to the default release
